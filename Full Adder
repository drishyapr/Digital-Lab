//using half adders
module halfadder(
    input a,
    input b,
    output s,
    output c
    );
    assign s = a ^ b;
    assign c = a & b;
endmodule

module fulladder(
    input a,
    input b,
    input c,
    output s,
    output cout
    );
    wire c1,c2,s1;
    halfadder h1(a,b,s1,c1);
    halfadder h2(s1,c,s,c2);
    or o1(cout,c1,c2);
endmodule



//Structural
module full_adder_structural(
    input x,
    input y,
    input z,
    output s,
    output c
);
    wire s1, c1, c2;

    half_adder_structural ha1(x, y, s1, c1);
    half_adder_structural ha2(s1, z, s, c2);
    or (c, c1, c2);
endmodule




//behavioural
module full_adder(
    input x,
    input y,
    input z,
    output reg s,
    output reg c
);
    always @(x or y or z) 
    begin
    {c, s} = x + y + z;
    end
endmodule

module full_adder_dataflow(
    input x,
    input y,
    input z,
    output s,
    output c
);
    assign s = x ^ y ^ z;
    assign c = (x & y) | (y & z) | (z & x);
endmodule




//dataflow
module full_adder_dataflow(
    input x,
    input y,
    input z,
    output s,
    output c
);
    assign s = x ^ y ^ z;
    assign c = (x & y) | (y & z) | (z & x);
endmodule




//testbench
module fulladdeer_tb(
    );
    reg a,b,c;
    wire s,cout;
    fulladder f1(a,b,c,s,cout);
    initial
    begin
    a=1'b0;b=1'b0;c=1'b0;
    #10 a=1'b0;b=1'b0;c=1'b1;
    #10 a=1'b0;b=1'b1;c=1'b0;
    #10 a=1'b0;b=1'b1;c=1'b1;
    #10 a=1'b1;b=1'b0;c=1'b0;
    #10 a=1'b1;b=1'b0;c=1'b1;
    #10 a=1'b1;b=1'b1;c=1'b0;
    #10 a=1'b1;b=1'b1;c=1'b1;
    #10 $finish;
    end
endmodule
