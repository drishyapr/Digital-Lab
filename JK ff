//Behavioural JK
module jk(
   input j,
   input k,
   input clk,
   input clr,
   output reg q
);
   always @(posedge clk or clr)
   begin
   if(!clr)
   q=1'b0;
   else
   case({j,k})
   2'b00:q=q;
   2'b01:q=0;
   2'b10:q=1;
   2'b11:q=~q;
   endcase
   end
endmodule





// Dataflow of JK
module dff (
    input d,
    input clk,
    input clr,
    output reg q
);
    always @(posedge clk or posedge clr) begin
        if (clr)
            q <= 1'b0;
        else
            q <= d;
    end
endmodule
module jk_dataflow (
    input j,
    input k,
    input clk,
    input clr,
    output q
);
    wire d;

    // JK to D conversion logic
    assign d = (j & ~q) | (~k & q);

    // D Flip-Flop instantiation
    dff d1 (.d(d), .clk(clk), .clr(clr), .q(q));

endmodule




//Testbench 
module jk_tb(
);
   reg j,k,clk,clr;
   wire q;
   jk j1(j,k,clk,clr,q);
   initial
   begin
   clr=1'b0;
   #5 clr=1'b1;
   clk=1'b0;
   j=1'b0;k=1'b0;
   #10 j=1'b0;k=1'b1;
   #10 j=1'b1;k=1'b0;
   #10 j=1'b1;k=1'b1;
   #10 $finish;
   end
   always #5 clk=~clk;
endmodule